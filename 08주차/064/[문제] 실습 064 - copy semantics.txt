실습 064 - copy semantics
제출 마감일 2023-04-30 2359
업로드 가능한 파일 수 2
제출 방식 개인

목적



이 실습은  class 의 복사 생성자와 복사 대입 연산자를 연습합니다. 



설명



C++ 클래스를 정의할 때, 복사 시멘틱을 이해하고 있어야 합니다.

특히 클래스가 포인터 등의 자원을 사용할 때, 복사 시멘틱을 고려하지 않으면, 개발자가 의도한 대로 동작하지 않게 됩니다.



문자열 클래스를 정의해 봅시다.



class String {
public
    String(const char str)  {

        s = new char[strlen(str) + 1];

        strcpy(s, str);

    }

    const char data() const {
       return s;
    }
private
    char s;
};

먼저, 생성자를 선언합니다.

인자로 넘겨 받은 str 의 길이만큼 메모리를 할당 받습니다.
+1 해서 널 문자를 위한 공간도 함께 할당 받았습니다.

modern 한 방법으로는 stdcopy() 함수를 사용해서 내용을 복사합니다.

C-style 방법으로는 strcpy  류의 문자열 복사 함수나 
memcpy 류의 메모리 복사 함수를 이용해서 내용을 복사합니다.
(for 문으로 문자열 길이만큼 반복해서 하나 하나 배열에 대입하는 방법도 있습니다)


다음으로, String 클래스를 한번 사용해 보겠습니다.


int main() {
    String s{abc};
    stdcout  s.data()  stdendl;
}
 
잘 됩니다 ^^


다음으로, nullptr 한번 전달해 보겠습니다.

String {nullptr} ;

프로그램이 정상 종료 되지 않네요. (exit code가 0이 아님)


nullptr 이 전달됐을 때, String이 어떤 상태여야 하는지 고민해 봅니다.


String s1;
String s2{nullptr};


'음, 길이가 0인 스트링이라고 정의하자!'

개발자가 결정한 방법대로 구현해 봅니다.


String(const char str) {
    if(str) {
        s = new char[strlen(str) + 1];
        strcpy(s, str);
    } else {
        s = new char[1];
        s[0] = '0';
    }
}

다음 코드가 문제 없이 실행됩니다.


String s1 {nullptr};
stdcout  s1.data()  stdendl;


하지만, 값을 넘겨 주지 않으면서 변수를 선언하면 에러가 발생합니다. 

String s2 ;


기본 생성자도 필요해 보이므로 구현해 줍니다.


String() {
    s = new char[1];
    s[0] = '0';
}


문자열 생성이 어느 정도 되는 것 같으니, 문자열을 복사하는 경우도 살펴 봅시다.


강의에서 설명 드린대로 대표적인 복사 상황은 다음과 같습니다.


String s1 { abc } ;     constructor
String s2 { s1 } ;           copy constructor

String s3;                      constructor
s3 = s1;                         copy assignment operator


복사 생성자의 모습은 일반적으로 클래스명(const 클래스명&); 입니다.

String (const String& str);


복사 생성자 내부에서 해야할 일은

파라미터로 전달 받은 객체의 내부 변수 값을 자신의 멤버 변수로 복사하는 일입니다.


String 클래스에는 char 배열을 멤버 변수로 가지고 있으므로 다음과 같이 복사할 수 있습니다.

stdcopy() - 모던한 방법
strcpy() , memcpy() - C-style 방법
for 문으로 char 하나씩 복사하기


복사 대입 연산자는 조심해야 할 부분이 있습니다.

String s5 = abc;
 s5 = s1 ;    copy assignment operator 


s5 객체는 복사 대입이 일어나기 이전에 자신의 문자열 메모리 공간을 가지고 있습니다.
그러므로 s1 을 복사하기 이전에, s5 자신의 메모리 공간을 clean-up 해 줘야 합니다.



core guideline c.61 에 따르면 복사 후,

1. 값을 비교하면 같고 (x == y),
2. 둘 중 하나를 변경하면, 나머지는 변화가 없어야 합니다. (independent)


아직 operator overloading 을 배우기 전이므로 stdstrcmp 함수로 비교해 보겠습니다.


String s8 {s7};
stdcout  stdstrcmp(s7.data(), s8.data())  stdendl;
s7.at(1) = 'a';
stdcout  stdstrcmp(s7.data(), s8.data())  stdendl;


정상 출력은 0, 0이 아닌 값 입니다.

0, 0 이렇게 나오면 복사가 제대로 동작하지 않은 것입니다.


마지막으로, 복사 연산은 자기 대입에 안전한지 확인 (C.62) 해 보겠습니다. 

s8 = s8;


체크하는 방법은 this 포인터의 주소값과 파라미터로 넘겨 받는 객체의 주소값을 비교해 보면 될 것 같습니다.



문제

복사 시멘틱을 준수하는 String 클래스를 정의하시오.
단, 복사 생성자와 복사 대입 연산자를 구현하시오.
(프로그램 종료 코드는 exit code 0 으로 정상 종료 되어야 함)



참조
StringTest.cpp

#include cstring
#include iostream
#include String.h

void printString(const String s){
    s.print(printString);
}

String createName(){
    String name{Kim};
    return name;
}

int main(){
    String s1;
    s1.print(s1);

    String s2 = abc;
    s2.print(s2);

    String s3 {def};
    s3.print(s3);

    String s4 = s3;
    s4.print(s4);

    String s5;
    s5 = s4;   problem the data points to the same address
    s5 = abc;
    s5.print(s5);

    s4.at(1) = 'E';
    s4.print(s4);
    s5.print(s5);

    printString(hij);
    printString(s2);   shallow copy 

    String s6 = createName();
    s6.print(s6);

    String s7;
    s7 = createName();
    s7.print(s7);


    String s8 {s7};
    stdcout  stdstrcmp(s7.data(), s8.data())  stdendl;
    s7.at(1) = 'a';
    stdcout  stdstrcmp(s7.data(), s8.data())  stdendl;
    s8 = s8;
}



입력

없음


출력

s1 , size 0

s2 abc, size 3

s3 def, size 3

s4 def, size 3

s5 def, size 3

s4 dEf, size 3

s5 def, size 3

printString hij, size 3

printString abc, size 3

s6 Kim, size 3

s7 Kim, size 3

0

-8






제출파일

String.cpp
64.csv



참고

String.h -----------------------------


#include stddef.h
class String {
public
    String();
    String(const char str);
    String(const String& str);
    String& operator=(const String& str);
    ~String();
    const char data() const;
    char& at(size_t);
    size_t size() const;
    void print(const char str=) const;
private
    void swap(String& str);
    int len;
    char s;
};