실습 049 STL 함수
제출 마감일 2023-05-07 2359
업로드 가능한 파일 수 2
제출 방식 개인


목적


이 실습은 STL  알고리즘 함수와 람다 함수를 연습합니다. 



설명
 

C++ 에서는 STL 알고리즘과 람다 함수를 이용하면 배열이나 백터와 같은 컨테이너에 저장된 데이터를  쉽고 효율적으로 처리할 수 있습니다.

STL 알고리즘에는 정렬, 검색, 제거 등과 같은 기능을 제공하는 함수들이 있습니다.

람다 함수는 이들 함수의 인자로 익명 함수를 전달할 수 있는 간결하고 유연한 방법을 제공합니다.


 

문제

과일 가게의 재고를 관리하는 프로그램을 작성해 봅니다.
재고 관리 프로그램은 다음과 같은 기능을 제공하며, STL 알고리즘과 람다 함수를 이용해서 구현합니다.

가격이 비싼 순서로 재고 목록을 정렬합니다. (stdsort)
특정 이름을 가진 품목을 찾습니다. (stdfind_if )
특정 가격보다 비싼 품목의 수를 계산합니다. (stdcount_if )
재고가 0인 품목을 목록에서 삭제합니다. (stdremove_if )
재고 목록을 출력합니다. (stdfor_each)

참고

stl_lambda.cpp

struct Item {

    stdstring name;

    double price;

    int quantity;

};



int main() {

    stdvectorItem inventory = {

            {Apple, 0.99, 10},

            {Banana, 0.59, 20},

            {Cherry, 1.49, 5},

            {Dates, 2.99, 2},

            {Elderberry, 3.99, 0},

            {Fig, 2.49, 15},

            {Grape, 0.79, 25},

            {Honeydew, 1.29, 8},

            {Indian Gooseberry, 2.99, 0},

            {Jackfruit, 4.99, 1}};

            implement your code

    return 0;

}




입력

없음


출력

Banana 0.59 20
Grape 0.79 25
Apple 0.99 10
Honeydew 1.29 8
Cherry 1.49 5
Fig 2.49 15
Dates 2.99 2
Indian Gooseberry 2.99 0
Elderberry 3.99 0
Jackfruit 4.99 1
Item found Grape 0.79 25
Number of expensive items 5
Banana 0.59 20
Grape 0.79 25
Apple 0.99 10
Honeydew 1.29 8
Cherry 1.49 5
Fig 2.49 15
Dates 2.99 2
Jackfruit 4.99 1



제출파일

stl_lambda.cpp
49.csv